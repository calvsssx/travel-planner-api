// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelPlannerAPI.Data;

#nullable disable

namespace TravelPlannerAPI.Migrations
{
    [DbContext(typeof(TravelPlannerContext))]
    [Migration("20230428160455_migration2")]
    partial class migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelPlannerAPI.Models.ActivityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.DestinationActivityModel", b =>
                {
                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("TripDestinationModelDestinationId")
                        .HasColumnType("int");

                    b.Property<int?>("TripDestinationModelTripId")
                        .HasColumnType("int");

                    b.HasKey("DestinationId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TripDestinationModelTripId", "TripDestinationModelDestinationId");

                    b.ToTable("DestinationActivities");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.DestinationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.TripDestinationModel", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("TripId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("TripDestinations");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.TripModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserModelId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.DestinationActivityModel", b =>
                {
                    b.HasOne("TravelPlannerAPI.Models.ActivityModel", "Activity")
                        .WithMany("DestinationActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelPlannerAPI.Models.DestinationModel", "Destination")
                        .WithMany("DestinationActivities")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelPlannerAPI.Models.TripDestinationModel", null)
                        .WithMany("DestinationActivities")
                        .HasForeignKey("TripDestinationModelTripId", "TripDestinationModelDestinationId");

                    b.Navigation("Activity");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.TripDestinationModel", b =>
                {
                    b.HasOne("TravelPlannerAPI.Models.DestinationModel", "Destination")
                        .WithMany("TripDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelPlannerAPI.Models.TripModel", "Trip")
                        .WithMany("TripDestinations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.TripModel", b =>
                {
                    b.HasOne("TravelPlannerAPI.Models.DestinationModel", "Destination")
                        .WithMany("Trips")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelPlannerAPI.Models.UserModel", null)
                        .WithMany("Trips")
                        .HasForeignKey("UserModelId");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.ActivityModel", b =>
                {
                    b.Navigation("DestinationActivities");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.DestinationModel", b =>
                {
                    b.Navigation("DestinationActivities");

                    b.Navigation("TripDestinations");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.TripDestinationModel", b =>
                {
                    b.Navigation("DestinationActivities");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.TripModel", b =>
                {
                    b.Navigation("TripDestinations");
                });

            modelBuilder.Entity("TravelPlannerAPI.Models.UserModel", b =>
                {
                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
